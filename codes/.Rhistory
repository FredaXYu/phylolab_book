print("=====================")
clear()
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
outcome = sample(x=c(0,1), size = 5, replace=TRUE, prob=rep(0.5,2))
outcome
print(paste("The count of heads is", sum(outcome)))
?sample
nsim = 1000
result = rep(0,nsim)
for(i in 1:nsim){
outcome = sample(x=c(0,1), size = 5, replace=TRUE, prob=rep(0.5,2))
result[i] = sum(outcome)
}
table(result)
barplot(table(result))
?rep
result = rbinom(1000, size=5, p=0.5)
table(result)
barplot(table(result))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x, typeof(x))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x)
print(typeof(x))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x)
print(typeof(x))
#proportions of A, C, G, T
sum(x=='A')/length(x)
sum(x=='C')/length(x)
sum(x=='G')/length(x)
sum(x=='T')/length(x)
position = sample(1:length(x),size=10)
data = x[position]
data
position=sample(1:length(x),size=1)   # select the index
x[position]    # use index to select the nucleotide
#sample 10 nucleotides without replacement
position = sample(1:length(x),size=10)
data = x[position]   # here omit the for loop
data
print("the proportions of A, C, G, T in the sample of 10 nucleotides")
sum(data=='A')/10
sum(data=='C')/10
sum(data=='G')/10
sum(data=='T')/10
position = sample(1:length(x),size=100,replace=TRUE)
data = x[position]
print("the proportions of A, C, G, T in the sample of 100 nucleotides")
sum(data=='A')/100
sum(data=='C')/100
sum(data=='G')/100
sum(data=='T')/100
rbinom(n=10, size=5, prob=0.5)
runif(1, min=0, max=2)
runif(4, min=0, max=2)
data = rnorm(10, mean=4.5, sd=sqrt(2))
data
?grep
x = scan("https://book.phylolab.net/binf8441/data/lab2_test.fasta", what="character",sep="\n")
#count the number of >
index = grep(">",x)   # find
index
typeof(index)
x = scan("https://book.phylolab.net/binf8441/data/lab2_test.fasta", what="character",sep="\n")
#count the number of >
index = grep(">",x)   # find
index
typeof(index)
nseq = length(index)   # how many >
print(paste("the number of sequences:",nseq))
#get sequences
seq=rep("",length(index))
for(i in 1:length(index)){
if(i < length(index)){
# the sequence is the character after > and before the next >
seq[i] = paste(x[(index[i]+1):(index[i+1]-1)],collapse="",sep="")
}else{
# the last one, read through all after >
seq[i] = paste(x[(index[i]+1):length(x)],collapse="",sep="")
}
}
print(paste(seq[2], typeof(seq)))
?row.names
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
par(mfrow=c(2,2))
plot(x,y,pch=16)
abline(result,col="brown")
plot(result$residuals)
abline(a=0,b=0, col="brown")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
#----------
par(mfrow=c(2,2))   # four plots
plot(x,y,pch=16)
abline(result,col="brown")
plot(result$residuals)
abline(a=0,b=0, col="brown")
hist(result$residuals)
qqline(result$residuals, col = "brown")
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
shapiro.test(result$residuals)
shapiro.test(result$residuals)
x_new = 0.7
y_new = result$coefficients[1]+result$coefficients[2]*x_new
y_new
result
x = rnorm(100, mean=0, sd=1)
y = 2.1+1.25*x^2+error
data=data.frame(cbind(x,y))
result = lm(data$y~data$x)
summary(result)
x1 = rnorm(100, mean=3, sd=1)
x2 = rnorm(100, mean=2.5, sd=2.1)
error = rnorm(100, mean=0, sd=2)
y = 2.1 + 1.25*x1 - 3*x2 + error
data=data.frame(cbind(y,x1,x2))
plot(data)
result = lm(y~x1+x2,data=data)
summary(result)
# residual plot:
par(mfrow=c(2,2))
plot(result$residuals)
abline(a=0,b=0, col="red")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline
-----
# residual plot:
par(mfrow=c(2,2))
x1 = rnorm(100, mean=3, sd=1)
x2 = rnorm(100, mean=2.5, sd=2.1)
error = rnorm(100, mean=0, sd=2)
y = 2.1 + 1.25*x1 - 3*x2 + error
data=data.frame(cbind(y,x1,x2))
plot(data)
#-----------
result = lm(y~x1+x2,data=data)
summary(result)
#-------------
# residual plot:
par(mfrow=c(2,2))
plot(result$residuals)
abline(a=0,b=0, col="red")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
#--------------
# Checking the normality assumption
shapiro.test(result$residuals)
?read.csv
data=read.csv('../data/breast-cancer.csv')   # cannot work
data <- read.csv("../data/breast-cancer.csv")   # cannot work
data <- read.csv("../data/breast-cancer.csv")   # cannot work
setwd("~/文档/GitHub/phylolab_book/codes")
data <- read.csv("../data/breast-cancer.csv")   # cannot work
data
?gsub
data[,1]
?strsplit
?unlist
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
unlist(l.ex, recursive = FALSE)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
n <- unlist(l.ex, recursive = FALSE)
typeof(n)
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
n <- unlist(l.ex, recursive = FALSE)
typeof(n)
typeof(n[1])
l.ex <- list(a = list(1:5, LETTERS[1:5]), b = "Z", c = NA)
n <- unlist(l.ex, recursive = FALSE)
typeof(n)
typeof(n[1])
typeof(n[[1]])
i <- '34-68'
# delete the ''
i_no_quotation = gsub("'", "", i)
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
typeof(i_num)
typeof(i_num[1])
i <- '34-68'
# delete the ''
i_no_quotation = gsub("'", "", i)
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
i_num
typeof(i_num)
typeof(i_num[1])
i <- '34-68'
# delete the ''
i_no_quotation = gsub("'", "", i)
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
i_num
typeof(i_num)
typeof(i_num[1])
typeof(i_num[[1]])
i_num[[1]]
i_num[[1]][1]
1])
typeof(i_num[[1]][1])
data <- read.csv("../data/breast-cancer.csv")
data
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the ''
i_no_quotation = gsub("'", "", i)
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
# store the two numbers into different vectors
a[i] = i_num[[1]][1]
b[i] = i_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(a[i])
b[i] = as.numeric(b[i])
}
a
b
i <- '34-68'
# delete the ''
i_no_quotation = gsub("'", "", i)
i_no_quotation
i_num = strsplit(i_no_quotation, split="-")
i_num
i_num[[1]][1]
i_num[[1]][2]
data <- read.csv("../data/breast-cancer.csv")
data
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the ''
i_no_quotation = gsub("'", "", i)
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
# store the two numbers into different vectors
a[i] = i_num[[1]][1]
b[i] = i_num[[1]][2]
a[i]
b[i]
# translate into numeric type:
a[i] = as.numeric(a[i])
b[i] = as.numeric(b[i])
}
i <- '34-68'
# delete the ''
i_no_quotation = gsub("'", "", i)
i_no_quotation
# string split based on -
i_num = strsplit(i_no_quotation, split="-")
i_num
typeof(i_num)
typeof(i_num[1])
typeof(i_num[[1]])
i_num[[1]]
i_num[[1]][1]
i_num[[1]][2]
typeof(i_num[[1]][1])
# store the two numbers into different vectors
a = i_num[[1]][1]
b = i_num[[1]][2]
a
b
# translate into numeric type:
a = as.numeric(a)
b = as.numeric(b)
a
b
x = data[,1]
x
x[1]
x = data[,1]
x[1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the quotation marks, if find:
x_no_quotation = gsub("'", "", x[i])
# string split based on -
x_num = strsplit(x_no_quotation, split="-")
# store the two numbers into different vectors
a[i] = x_num[[1]][1]
b[i] = x_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(a[i])
b[i] = as.numeric(b[i])
}
a
b
data <- read.csv("../data/breast-cancer.csv")
data
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
x[1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the quotation marks, if find:
x_no_quotation = gsub("'", "", x[i])
# string split based on -
x_num = strsplit(x_no_quotation, split="-")
# store the two numbers into different vectors
w = x_num[[1]][1]
v = x_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(w)
b[i] = as.numeric(v)
}
a
b
data <- read.csv("../data/breast-cancer.csv", header=TRUE)
data
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
x[1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the quotation marks, if find:
x_no_quotation = gsub("'", "", x[i])
# string split based on -
x_num = strsplit(x_no_quotation, split="-")
# store the two numbers into different vectors
w = x_num[[1]][1]
v = x_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(w)
b[i] = as.numeric(v)
}
a
b
data <- read.csv("../data/breast-cancer.csv", header=TRUE)
data
typeof(data)
?mean
mean_ab = rep(0, length(x))
for(i in 1:length(x)){
mean_ab[i] = (a[i] + b[i]) / 2
}
left = mean_ab[data[,2]=="left"]
right = mean_ab[data[,2]=="right"]
left
t.test
?t.test
data <- read.csv("../data/breast-cancer.csv", header=TRUE)
data
typeof(data)   # list
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
x[1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the quotation marks, if find:
x_no_quotation = gsub("'", "", x[i])
# string split based on -
x_num = strsplit(x_no_quotation, split="-")
# store the two numbers into different vectors
w = x_num[[1]][1]
v = x_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(w)
b[i] = as.numeric(v)
}
mean_ab = rep(0, length(x))
for(i in 1:length(x)){
mean_ab[i] = (a[i] + b[i]) / 2
}
left = mean_ab[data[,2]=="left"]
right = mean_ab[data[,2]=="right"]
t.test(left, right, alternative = "two.sided")
mean_ab[i] = (a[i] + b[i]) / 2
}
recurrent = mean_ab[data[,3]=="recurrent-events"]     # very useful!!!!!!!
no-recurrent = mean_ab[data[,3]=="no-recurrent-events"]
recurrent = mean_ab[data[,3]=="recurrent-events"]     # very useful!!!!!!!
no_recurrent = mean_ab[data[,3]=="no-recurrent-events"]
t.test(recurrent, no_recurrent, alternative = "two.sided")
data <- read.csv("../data/breast-cancer.csv", header=TRUE)
data
typeof(data)   # list
# Null hypothesis:
# The tumor size is the same between the left and the right breast.
# Alternative hypothesis:
# The tumor size is different between the left and the right breast.
# Test statistic:
# Using two sample two sided T test - t=(x1 bar - x2 bar)/sqrt(s1 square / n1 + s2 square / n2)
x = data[,1]
x[1]
a = rep(0, length(x))  # initialisation of a vector
b = rep(0, length(x))  # initialisation of a vector
for(i in 1:length(x)){
# delete the quotation marks, if find:
x_no_quotation = gsub("'", "", x[i])
# string split based on -
x_num = strsplit(x_no_quotation, split="-")
# store the two numbers into different vectors
w = x_num[[1]][1]
v = x_num[[1]][2]
# translate into numeric type:
a[i] = as.numeric(w)
b[i] = as.numeric(v)
}
mean_ab = rep(0, length(x))
for(i in 1:length(x)){
mean_ab[i] = (a[i] + b[i]) / 2
}
left = mean_ab[data[,2]=="left"]     # very useful!!!!!!!
right = mean_ab[data[,2]=="right"]
t.test(left, right, alternative = "two.sided")
# p-value = 0.4043
# 95 percent confidence interval:
# -3.518883  1.422457
# conclusion:
# The left and right are not significantly different from each other.
# Because p-value > 0.05, we cannot reject the null hypothesis. There is no evidence in the data
# to indicate that the tumor size of the left breast is different from the tumor size of
# the right breast.
#=================================================================
recurrent = mean_ab[data[,3]=="recurrent-events"]     # very useful!!!!!!!
no_recurrent = mean_ab[data[,3]=="no-recurrent-events"]
t.test(recurrent, no_recurrent, alternative = "two.sided")
recurrent = mean_ab[data[,3]=="recurrence-events"]     # very useful!!!!!!!
no_recurrent = mean_ab[data[,3]=="no-recurrence-events"]
t.test(recurrent, no_recurrent, alternative = "two.sided")
?table
smoke_data = read.csv("../data/smoke-cancer.csv")
smoke_data = read.csv("../data/smoke_cancer.csv")
tbl = table(smoke_data)
chisq.test(tbl)
?chisq.test
M <- as.table(rbind(c(762, 327, 468), c(484, 239, 477)))
M
dimnames(M) <- list(gender = c("F", "M"),
party = c("Democrat","Independent", "Republican"))
M
library(vcd)
mytable <- xtabs(~Treatment+Improved, data=Arthritis)　　　
chisq.test(mytable)
fisher.test(tbl)
mantelhaen.test(tbl)
