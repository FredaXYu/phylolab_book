q
q()
# Ch 11 bootstrap
# Parametric bootstrap
nbootstrap = 1000
ave = 1:nbootstrap
for(i in 1:nbootstrap){
x = rnorm(10, mean=129.81, sd=sqrt(6.49))
ave[i] = mean(x)
}
print(paste("the variance of the sample average is",var(ave)))
#------------------
new = c(42.1 , 41.3 , 42.4 , 43.2 , 41.8 , 42.7 , 43.8 , 42.5 , 43.1 , 44.0)
old = c(41.0 , 41.8 , 42.8 , 42.3 , 42.7 , 43.6 , 43.3 , 43.5 , 41.7 , 44.1)
# estimate mu and variance
mu = mean(c(new,old))
va = var(c(new,old))
print(paste("the estimate of mu is", mu))
print(paste("the estimate of variance is", va))
# approximate the null distribution of the test statistic t
teststat = mean(new)-mean(old)
nbootstrap = 1000
t_bootstrap = 1:nbootstrap
for(i in 1:nbootstrap){
x = rnorm(10, mean = mu, sd = sqrt(va))
y = rnorm(10, mean = mu, sd = sqrt(va))
t_bootstrap[i] = mean(x)-mean(y)
}
# find the 2.5% and 97.5% quantile
critical_value = quantile(t_bootstrap, p=c(0.025,0.975))
print(paste("the 2.5% quantile:", critical_value[1]))
print(paste("the 97.5% quantile:",critical_value[2]))
print(paste("test statistic:",teststat))
if(teststat < critical_value[1] | teststat>critical_value[2]){
print("We reject the null hypothesis")
}else{
print("We cannot reject the null hypothesis")
}
print("=====================================")
#====================================
# non-parametric bootstrap
data = c(125.2028,128.9885,131.3598,126.8757, 128.8428,128.8664,133.3717,131.3412,132.6467,130.6033)
nbootstrap = 1000
ave = 1:nbootstrap
for(i in 1:nbootstrap){
x = sample(data, 10, replace=TRUE)
ave[i] = mean(x)
}
print(paste("the variance of the sample average is",var(ave)))
#------------------------
new = c(42.1 , 41.3 , 42.4 , 43.2 , 41.8 , 42.7 , 43.8 , 42.5 , 43.1 , 44.0)
old = c(41.0 , 41.8 , 42.8 , 42.3 , 42.7 , 43.6 , 43.3 , 43.5 , 41.7 , 44.1)
all = c(new,old)
# approximate the null distribution of the test statistic t
teststat = mean(new)-mean(old)
nbootstrap = 1000
t_bootstrap = 1:nbootstrap
for(i in 1:nbootstrap){
x = sample(all, 10, replace=TRUE)
y = sample(all, 10, replace=TRUE)
t_bootstrap[i] = mean(x)-mean(y)
}
# find the 2.5% and 97.5% quantile
critical_value = quantile(t_bootstrap, p=c(0.025,0.975))
print(paste("the 2.5% quantile:", critical_value[1]))
print(paste("the 97.5% quantile:",critical_value[2]))
print(paste("test statistic:",teststat))
if(teststat < critical_value[1] | teststat>critical_value[2]){
print("We reject the null hypothesis")
}else{
print("We cannot reject the null hypothesis")
}
# plots
par(mfrow=c(2,1))
curve(dnorm(x), from=-4, to=4, main="Standard Normal PDF", col="blue")
# plots
par(mfrow=c(2,1))
curve(dnorm(x), from=-4, to=4, main="Standard Normal PDF", col="blue")
curve(pnorm(x), from=-4, to=4, main="Standard Normal CDF", col="blue")
print("=====================")
par(mfrow=c(2,1))
curve(dgamma(x,shape=2), 0, 10, main="Gamma PDF",col="blue")
curve(pgamma(x,shape=2), 0, 10, main="Gamma CDF",col="blue")
print("=====================")
clear()
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 1, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
sample(x=1:3, size = 2, replace=FALSE, prob = c(1/3,1/3,1/3))
outcome = sample(x=c(0,1), size = 5, replace=TRUE, prob=rep(0.5,2))
outcome
print(paste("The count of heads is", sum(outcome)))
?sample
nsim = 1000
result = rep(0,nsim)
for(i in 1:nsim){
outcome = sample(x=c(0,1), size = 5, replace=TRUE, prob=rep(0.5,2))
result[i] = sum(outcome)
}
table(result)
barplot(table(result))
?rep
result = rbinom(1000, size=5, p=0.5)
table(result)
barplot(table(result))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x, typeof(x))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x)
print(typeof(x))
seq = "AGCCCGGGTTTACCCTTGGGAAAATTGCCCCAGTGACCCCT"
x = unlist(strsplit(seq,split=""))
print(x)
print(typeof(x))
#proportions of A, C, G, T
sum(x=='A')/length(x)
sum(x=='C')/length(x)
sum(x=='G')/length(x)
sum(x=='T')/length(x)
position = sample(1:length(x),size=10)
data = x[position]
data
position=sample(1:length(x),size=1)   # select the index
x[position]    # use index to select the nucleotide
#sample 10 nucleotides without replacement
position = sample(1:length(x),size=10)
data = x[position]   # here omit the for loop
data
print("the proportions of A, C, G, T in the sample of 10 nucleotides")
sum(data=='A')/10
sum(data=='C')/10
sum(data=='G')/10
sum(data=='T')/10
position = sample(1:length(x),size=100,replace=TRUE)
data = x[position]
print("the proportions of A, C, G, T in the sample of 100 nucleotides")
sum(data=='A')/100
sum(data=='C')/100
sum(data=='G')/100
sum(data=='T')/100
rbinom(n=10, size=5, prob=0.5)
runif(1, min=0, max=2)
runif(4, min=0, max=2)
data = rnorm(10, mean=4.5, sd=sqrt(2))
data
?grep
x = scan("https://book.phylolab.net/binf8441/data/lab2_test.fasta", what="character",sep="\n")
#count the number of >
index = grep(">",x)   # find
index
typeof(index)
x = scan("https://book.phylolab.net/binf8441/data/lab2_test.fasta", what="character",sep="\n")
#count the number of >
index = grep(">",x)   # find
index
typeof(index)
nseq = length(index)   # how many >
print(paste("the number of sequences:",nseq))
#get sequences
seq=rep("",length(index))
for(i in 1:length(index)){
if(i < length(index)){
# the sequence is the character after > and before the next >
seq[i] = paste(x[(index[i]+1):(index[i+1]-1)],collapse="",sep="")
}else{
# the last one, read through all after >
seq[i] = paste(x[(index[i]+1):length(x)],collapse="",sep="")
}
}
print(paste(seq[2], typeof(seq)))
?row.names
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
par(mfrow=c(2,2))
plot(x,y,pch=16)
abline(result,col="brown")
plot(result$residuals)
abline(a=0,b=0, col="brown")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
x = rnorm(100, mean=3, sd=1)    # random numbers from normal distribution
error = rnorm(100, mean=0, sd=2)  # random numbers from normal distribution
y = 2.1+1.25*x+error
data=data.frame(cbind(x,y))
data
result = lm(data$y~data$x)
summary(result)
#----------
par(mfrow=c(2,2))   # four plots
plot(x,y,pch=16)
abline(result,col="brown")
plot(result$residuals)
abline(a=0,b=0, col="brown")
hist(result$residuals)
qqline(result$residuals, col = "brown")
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
shapiro.test(result$residuals)
shapiro.test(result$residuals)
x_new = 0.7
y_new = result$coefficients[1]+result$coefficients[2]*x_new
y_new
result
x = rnorm(100, mean=0, sd=1)
y = 2.1+1.25*x^2+error
data=data.frame(cbind(x,y))
result = lm(data$y~data$x)
summary(result)
x1 = rnorm(100, mean=3, sd=1)
x2 = rnorm(100, mean=2.5, sd=2.1)
error = rnorm(100, mean=0, sd=2)
y = 2.1 + 1.25*x1 - 3*x2 + error
data=data.frame(cbind(y,x1,x2))
plot(data)
result = lm(y~x1+x2,data=data)
summary(result)
# residual plot:
par(mfrow=c(2,2))
plot(result$residuals)
abline(a=0,b=0, col="red")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline
-----
# residual plot:
par(mfrow=c(2,2))
x1 = rnorm(100, mean=3, sd=1)
x2 = rnorm(100, mean=2.5, sd=2.1)
error = rnorm(100, mean=0, sd=2)
y = 2.1 + 1.25*x1 - 3*x2 + error
data=data.frame(cbind(y,x1,x2))
plot(data)
#-----------
result = lm(y~x1+x2,data=data)
summary(result)
#-------------
# residual plot:
par(mfrow=c(2,2))
plot(result$residuals)
abline(a=0,b=0, col="red")
hist(result$residuals)
qqnorm(result$residuals, pch=16)
qqline(result$residuals, col = "brown")
#--------------
# Checking the normality assumption
shapiro.test(result$residuals)
data = data.frame(group=c(rep(0,10),rep(1,10)),
gene1 = c(rnorm(10, mean=0.2, sd=1), rnorm(10, mean=2.2, sd=1)),
gene2 = c(rnorm(10, mean=0.2, sd=1), rnorm(10, mean=0.2, sd=1)),
gene3 = c(rnorm(10, mean=0.2, sd=1), rnorm(10, mean=0.2, sd=1)),
gene4 = c(rnorm(10, mean=0.2, sd=1), rnorm(10, mean=2.2, sd=1)))
data
numtest = 4
pvalue = 1:numtest
for(i in 1:numtest){
pvalue[i] = t.test(data[,i+1] ~ data[,1])$p.value
}
print("the Bonferroni adjusted pvalues")
pvalue*numtest
numtest = 4
pvalue = 1:numtest
for(i in 1:numtest){
# take the p.value from the t.test outcomes:
pvalue[i] = t.test(data[,i+1] ~ data[,1])$p.value
}
pvalue
?t.test
t.test(data[,i+1] ~ data[,1])
?lm
gene_data = read.csv("../data/gene_expression.csv")
setwd("~/文档/GitHub/phylolab_book/codes")
gene_data = read.csv("../data/gene_expression.csv")
gene_data
gene_data = read.csv("../data/gene_expression.csv", header=TRUE)
gene_data
gene_data[1:20,2]
gene_data = read.csv("../data/gene_expression.csv", header=TRUE)
gene_data[1:20,2]
t.test(gene_data[1:20,2], gene_data[21:40,2], alternative = "two.sided")
colnames(gene_data)
# b)
colnames(gene_data)[1]
colnames(gene_data)[1]
# b)
colnames(gene_data)[101]
ncol(gene_data)
cols = ncol(gene_data)
colnames(gene_data)[cols]   # [1] is "X"
qualified_genes <- rep(NA, cols-1)   # pre-allocation
qualified_genes
qualified_genes <- rep(NA, cols-1)   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
if(p_value <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
qualified_genes[i] <- colnames(gene_data)[i+1]
}
}
qualified_genes
qualified_genes2 <- vector()   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
if(p_value <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
qualified_genes2 <- c(qualified_genes2, colnames(gene_data)[i+1])
}
}
qualified_genes2
?p.adjust
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
if(p_value <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
qualified_genes2 <- c(qualified_genes2, colnames(gene_data)[i+1])
}
}
Bon_genes <- vector()   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
adjusted_p = p.adjust(p_value, method = "bonferroni", n = cols)
if(adjusted_p <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
Bon_genes <- c(Bon_genes, colnames(gene_data)[i+1])
}
}
Bon_genes
pvalue = 1:100  # pre-allocation
for(i in 1:(cols-1)){
pvalue[i] = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
}
which(pvalue <= 0.05)
pvalue
pvalue_bon = p.adjust(pvalue, method="bonferroni")
which(pvalue_bon <= 0.05)
pvalue_fdr = p.adjust(pvalue, method = "BH")
which(pvalue_fdr <= 0.05)
FDR_genes <- vector()   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
adjusted_p = p.adjust(p_value, method = "BH", n = cols)
if(adjusted_p <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
FDR_genes <- c(FDR_genes, colnames(gene_data)[i+1])
}
}
FDR_genes
pvalue_fdr = p.adjust(pvalue, method = "BH")
which(pvalue_fdr <= 0.05)
FDR_genes <- vector()   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
adjusted_p = p.adjust(p_value, method = "BH", n = cols)
if(adjusted_p <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
FDR_genes <- c(FDR_genes, colnames(gene_data)[i+1])
}
}
FDR_genes
FDR_genes <- vector()   # pre-allocation
for(i in 1:(cols-1)){
p_value = t.test(gene_data[1:20,(i+1)], gene_data[21:40,(i+1)], alternative = "two.sided")$p.value
fdr_p = p.adjust(p_value, method = "BH", n = cols)
if(fdr_p <= 0.05){
# reject the null hypothesis that normal and cancer are the same
# that's to say, the gene is associated with cancer
FDR_genes <- c(FDR_genes, colnames(gene_data)[i+1])
}
}
FDR_genes
